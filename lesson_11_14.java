public class lesson_11_14 {
    //Код в конструкторе

    //И еще несколько важных замечаний насчет конструкторов.
    //В будущем, в процессе изучения Java, вы столкнётесь с такими вещами как наследование, сериализация, исключения и т.п.
    //Они все в разной степени влияют на работу конструкторов.
    //Сейчас нет смысла сильно углубляться в эти темы, но хотя бы коснуться их мы как минимум обязаны.
    //Например, одно важное замечание насчет конструкторов.
    //Теоретически в конструкторе можно писать код любой сложности. Но не нужно этого делать.
    //Сложная логика подразумевает большую вероятность ошибок и код, который должен правильно обрабатывать исключения.

    //Пример 1 – Сериализация
    //В стандартной Java-программе есть много ситуаций, когда объекты вашего класса создаются не вами.
    //Например, вы решили передать объект по сети: в таком случае Java-машина сама превратит ваш объект в набор байт,
    //передаст его и снова по набору байт создаст объект.
    //И вот тут окажется, что на другом компьютере нет вашего файла, в конструкторе возникнет ошибка,
    //никто ее не обработает — что вполне себе способно привести к закрытию программы.

    //Пример 2 — Инициализация полей класса
    //Если конструктор вашего класса может выбросить checked-исключения – содержит ключевое слово throws,
    //вы обязаны перехватить это исключение в методе, который создает ваш объект.

    //Постройка здания планировалась под ресторан и успешно завершилась,
    //но спустя некоторое время собственники решили переделать его под барбершоп.
    //Нам нужно сделать так, что бы здание было универсальным, и его назначение можно было менять, не создавая нового.
    //Для этого создай метод initialize, который будет устанавливать значение полю type (определять тип здания), а конструктор убери.
    public static void main(String[] args) {
        Building building = new Building();
        building.initialize("Барбершоп");
    }
}
class Building {
    private String type;

    public void initialize(String str) {
        this.type = str;
    }
}
