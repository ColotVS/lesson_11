public class lesson_11_01 {
    //Устройство Java-программы

    //Объекты и классы

    //Программист — как проектировщик. Только проектировщик рисует чертежи, а Java-программист пишет классы.
    //Затем на основе чертежей создаются детали, а на основе классов — объекты.

    //Сначала мы пишем классы (делаем чертежи), а потом, во время исполнения программы, на основе этих классов Java-машина создает объекты.

    //В Java все сущности во время работы программы являются объектами,
    //а написание программы сводится к описанию различных способов взаимодействия объектов.
    //Объекты просто вызывают методы друг друга и передают в них нужные данные.

    //А как узнать, какие данные передавать в методы?
    //Обычно у каждого класса есть описание, в котором говорится, для чего он создан.
    //Также обычно и у каждого публичного метода есть описание: что он делает, и какие данные нужно в него передавать.
    //Чтобы использовать класс, нужно в общих чертах знать, что он делает.
    //А также нужно точно знать, что делает каждый его метод. И совсем не обязательно знать, как он это делает.

    //Главное — понимать, для кого вы пишете код. А код вы пишете для других программистов.
    //Разработка любого продукта — это внесение изменений: добавили здесь, удалили там, переделали тут.
    //И так маленькими итерациями рождаются большие, огромные и гигантские проекты.
    //Главное требование к коду — он должен быть понятен другим программистам. Неправильный, но понятный код можно исправить.
    //Правильный и непонятный код улучшать не получится.

    //Для этого нужно делать три вещи:
    //Писать хороший и понятный код внутри методов
    //Решить, какие сущности должны быть в программе
    //Правильно разбивать программу на логические части

    //Писать хороший код внутри методов
    //Java — один из нескольких языков, в которых легко писать самодокументированный код: код, который понятен без комментариев.
    //В хорошем коде в Java многие методы читаются просто как предложения на английском языке.
    //Ваша задача при написании кода — тоже делать его максимально простым и лаконичным.
    //Просто думайте, а насколько ваш код будет легко читать, и вы начнете двигаться в правильном направлении.
    //В Java принято писать легко читаемый код. Желательно, чтобы каждый метод целиком помещался на экран (длина метода — 20-30 строк).
    //Это норма для всего Java-комьюнити. Если код можно улучшить, его нужно улучшить.

    //Решать, какие сущности должны быть в программе
    //Вам нужно писать код, понятный для других программистов.
    //Если 9 из 10 программистов при проектировании программы сделают в ней классы A, B и С,
    //то и вам тоже нужно сделать в вашей программе классы A, B, и C. Вы должны писать код, понятный для других.
    //Отличный, работающий, быстрый, нестандартный код — это плохой код.
    //Вам нужно изучать чужие проекты: это самый лучший, самый быстрый и самый легкий способ перенять всю мудрость,
    //которая десятилетиями копилась в ИТ-индустрии.
    //И, кстати, у вас уже есть под рукой отличный, популярный, хорошо документированный проект — Java SDK. Начните с него.
    //Разбирайте классы и структуры классов. Думайте, почему одни методы сделаны статическими, а другие — нет.
    //Почему у методов именно такие параметры, а не другие.
    //Почему именно такие методы, почему классы называются именно так и находятся именно в таких пакетах.

    //Правильно разбивать программу на логические части
    //Любую программу обычно разбивают на части или модули. Каждая часть отвечает за свой аспект программы.

}
