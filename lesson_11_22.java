public class lesson_11_22 {
    //Время жизни объекта

    //Объекты создаются с помощью оператора new, а вот как объекты удаляются?
    //В Java процесс удаления объектов полностью автоматизирован – удалением объектов занимается сама Java-машина.
    //Такой процесс называется сборкой мусора (garbage collecting), а механизм,
    //который собирает мусор — сборщиком мусора — Garbage Collector или сокращенно GC.

    //Так как Java-машина узнает, что какой-то объект нужно удалить и когда?

    //Все объекты сборщик мусора делит на достижимые и недостижимые.
    //Если на объект есть хотя бы одна ссылка, он считается достижимым.
    //Если нет ни одной переменной, которая ссылается на объект, такой объект считается недостижимым и объявляется мусором:
    //значит, его можно удалять.
    //В Java нельзя взять и создать ссылку на существующий объект: ее можно только присвоить.
    //Если мы стерли все ссылки на объект, он утерян навсегда.

    //Циклические ссылки
    //Предыдущая логика звучит отлично, пока мы не придумаем простой контрпример:
    //у нас есть два объекта, которые ссылаются друг на друга (хранят ссылки друг на друга).
    //Больше никто никаких ссылок на эти объекты не хранит.
    //К этим объектам нельзя обратиться из остального кода, однако ссылки на них все же есть.
    //Именно поэтому сборщик мусора делит объекты не на «объекты со ссылками» и «объекты без ссылок», а на достижимые и недостижимые.

    //Достижимые объекты
    //Сначала в список достижимых добавляются те объекты, которые 100% живые.
    //Например, текущий поток (Thread.current()) или Консоль (System.in).
    //Затем список достижимых объектов пополняют те, на которые ссылаются первые достижимые объекты.
    //Затем те, на кого ссылаются вторые и т.д.
    //Таким образом, если есть некая группа объектов, которые ссылаются только друг на друга,
    //но от достижимых объектов до них никак добраться нельзя, такие объекты будут считаться мусором и будут удалены.
}

